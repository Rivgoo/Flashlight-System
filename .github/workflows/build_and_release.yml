name: Release Unity Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Package Version (e.g., 1.0.0 or 1.0.0-beta.1)'
        required: true
        default: '0.1.0'
      package_prefix:
        description: 'Prefix for the package name'
        required: true
        default: 'FlashlightSystem'
      prerelease:
        description: 'Mark as pre-release?'
        type: boolean
        default: false

  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  build_and_release:
    name: Build and Release Unity Package
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Determine Version and Package Name
        id: package_vars
        run: |
          VERSION=""
          PACKAGE_PREFIX_INPUT=""
          IS_PRERELEASE="false"

          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            PACKAGE_PREFIX_INPUT="${{ github.event.inputs.package_prefix }}"
            if [ "${{ github.event.inputs.prerelease }}" == "true" ]; then
              IS_PRERELEASE="true"
            fi
            echo "Using version from workflow_dispatch: $VERSION"
          elif [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            if [[ "$VERSION" == *"-"* ]]; then
              IS_PRERELEASE="true"
            fi
            PACKAGE_PREFIX_INPUT="FlashlightSystem"
            echo "Using version from tag: $VERSION"
          else
            echo "Error: Could not determine version."
            exit 1
          fi
          
          UNITY_EXPORTED_BASE_NAME="FlashlightSystem.unitypackage"
          UNITY_EXPORT_DIR="Assets/Rivgo/ExportPackage"
          UNITY_EXPORTED_FILE_PATH="${UNITY_EXPORT_DIR}/${UNITY_EXPORTED_BASE_NAME}"

          FINAL_PACKAGE_NAME_PREFIX="${{ github.event.inputs.package_prefix || 'FlashlightSystem' }}"
          FINAL_PACKAGE_NAME="${FINAL_PACKAGE_NAME_PREFIX}_v${VERSION}.unitypackage"
          
          FINAL_RELEASE_ASSET_PATH="${UNITY_EXPORT_DIR}/${FINAL_PACKAGE_NAME}"

          echo "PACKAGE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "FINAL_PACKAGE_NAME=$FINAL_PACKAGE_NAME" >> $GITHUB_ENV
          echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV
          echo "UNITY_EXPORT_DIR=$UNITY_EXPORT_DIR" >> $GITHUB_ENV
          echo "UNITY_EXPORTED_FILE_PATH=$UNITY_EXPORTED_FILE_PATH" >> $GITHUB_ENV
          echo "FINAL_RELEASE_ASSET_PATH=$FINAL_RELEASE_ASSET_PATH" >> $GITHUB_ENV
          
          echo "Version for release/tag: $VERSION"
          echo "Package name from Unity: ${UNITY_EXPORTED_BASE_NAME}"
          echo "Final release asset name: $FINAL_PACKAGE_NAME"
          echo "Is prerelease: $IS_PRERELEASE"
          echo "Unity export directory: $UNITY_EXPORT_DIR"
          echo "Path to package after Unity export: $UNITY_EXPORTED_FILE_PATH"
          echo "Path to package for release (after rename): $FINAL_RELEASE_ASSET_PATH"
      
      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Get Unity Version
        id: unity_version
        run: |
          echo "UNITY_VERSION_FULL=$(cat ProjectSettings/ProjectVersion.txt | grep "m_EditorVersion:" | awk '{print $2}')" >> $GITHUB_ENV
          echo "Unity Editor Version: ${{ env.UNITY_VERSION_FULL }}"
      
      - name: Ensure export directory exists
        run: mkdir -p ${{ env.UNITY_EXPORT_DIR }}

      - name: Export .unitypackage from Unity
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ env.UNITY_VERSION_FULL }}
          targetPlatform: StandaloneLinux64
          buildMethod: Editor.PackageExporter.ExportPackage

      - name: Verify and Rename Exported Package
        run: |
          echo "Looking for package at: ${{ env.UNITY_EXPORTED_FILE_PATH }}"
          ls -lR Assets/
          
          if [ ! -f "${{ env.UNITY_EXPORTED_BASE_NAME }}" ]; then
            echo "Error: Package was not found at ${{ env.UNITY_EXPORTED_FILE_PATH }} after export."
            echo "Unity export might have failed. Check Unity logs from the previous step."
            exit 1
          fi
          echo "Package found at ${{ env.UNITY_EXPORTED_FILE_PATH }}."
          
          echo "Renaming ${{ env.UNITY_EXPORTED_FILE_PATH }} to ${{ env.FINAL_RELEASE_ASSET_PATH }}"
          mv "${{ env.UNITY_EXPORTED_FILE_PATH }}" "${{ env.FINAL_RELEASE_ASSET_PATH }}"
          
          if [ ! -f "${{ env.FINAL_RELEASE_ASSET_PATH }}" ]; then
            echo "Error: Failed to rename package to ${{ env.FINAL_RELEASE_ASSET_PATH }}."
            exit 1
          fi
          echo "Package successfully renamed to ${{ env.FINAL_PACKAGE_NAME }} in ${{ env.UNITY_EXPORT_DIR }}."

      - name: List exported files after rename
        run: |
            echo "Contents of ${{ env.UNITY_EXPORT_DIR }} after rename:"
            ls -lR ${{ env.UNITY_EXPORT_DIR }}/

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FINAL_PACKAGE_NAME }}
          path: ${{ env.FINAL_RELEASE_ASSET_PATH }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch')
        with:
          name: v${{ env.PACKAGE_VERSION }}
          tag_name: v${{ env.PACKAGE_VERSION }}
          files: ${{ env.FINAL_RELEASE_ASSET_PATH }}
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}