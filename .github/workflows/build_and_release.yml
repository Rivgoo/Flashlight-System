name: Build and Release

on:
  workflow_dispatch:
  create:
    tags:
      - 'v*.*.*'

env:
  UNITY_PROJECT_PATH: .

jobs:
  build_and_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Unity Version
        id: unity_version
        run: |
          UNITY_VERSION_LINE=$(grep "m_EditorVersion:" ProjectSettings/ProjectVersion.txt)
          UNITY_VERSION=$(echo "$UNITY_VERSION_LINE" | awk '{print $2}')
          echo "UNITY_EDITOR_VERSION=$UNITY_VERSION" >> $GITHUB_ENV
          
      - name: Set up Unity
        uses: game-ci/unity-builder@v4
        with:
          unityVersion: ${{ env.UNITY_EDITOR_VERSION }}
          targetPlatform: StandaloneLinux64

      - name: Determine Package Version
        id: package_version
        run: |
          if [[ "${{ github.event_name }}" == "create" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "VERSION=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi

      - name: Set Package Filename
        id: package_filename
        run: echo "FILENAME=Flashlight_${{ steps.package_version.outputs.VERSION }}_Rivgo.unitypackage" >> $GITHUB_OUTPUT

      - name: Execute Unity Editor Script to Export Package
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          unityVersion: ${{ env.UNITY_EDITOR_VERSION }}
          targetPlatform: StandaloneLinux64
          projectPath: ${{ env.UNITY_PROJECT_PATH }}
          executeMethod: Rivgo.Editor.PackageExporter.ExportPackage
          customParameters: version=${{ steps.package_version.outputs.VERSION }} outputPath=Output/${{ steps.package_filename.outputs.FILENAME }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: Automated release for version ${{ github.ref_name }}.
          draft: false
          prerelease: false
          files: ${{ env.UNITY_PROJECT_PATH }}/Output/${{ steps.package_filename.outputs.FILENAME }}

      - name: Upload Artifact (for main branch pushes)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package_filename.outputs.FILENAME }}
          path: ${{ env.UNITY_PROJECT_PATH }}/Output/${{ steps.package_filename.outputs.FILENAME }}
